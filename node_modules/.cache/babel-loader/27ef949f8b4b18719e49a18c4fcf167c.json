{"ast":null,"code":"var _jsxFileName = \"/home/pantis/Documents/webystall/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Structure from './components/Structure';\nimport Rotations from './components/Rotations';\nimport { useState, useEffect } from 'react';\nimport UploadFiles from './components/UploadFiles';\nimport SpeciesControl from './components/SpeciesControl';\nimport DataPoints from './components/DataPoints';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    console.log('Webystal. Created by Pantis Calin');\n  }, []);\n  const atoms = \"H,He,Li,Be,B,C,N,O,F,Ne,Na,Mg,Al,Si,P,S,Cl,Ar,K,Ca,Sc,Ti,V,Cr,Mn,Fe,Co,Ni,Cu,Zn,Ga,Ge,As,Se,Br,Kr,Rb,Sr,Y,Zr,Nb,Mo,Tc,Ru,Rh,Pd,Ag,Cd,In,Sn,Sb,Te,I,Xe,Cs,Ba,La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu,Hf,Ta,W,Re,Os,Ir,Pt,Au,Hg,Tl,Pb,Bi,Po,At,Rn,Fr,Ra,Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr,Rf,Db,Sg,Bh,Hs,Mt,Ds,Rg,Cn,Uut,Fl,Uup,Lv,Uus,Uuo\".split(',');\n  const [toShowPannel, setToShowPannel] = useState('Elements');\n  const [order, setOrder] = useState('1;2;3;4'); // State constants\n\n  const [state, setState] = useState({\n    showAxis: true,\n    maxBound: 2.4,\n    translateX: [0],\n    translateY: [0],\n    translateZ: [0],\n    repetitionX: [1],\n    constantX: [[3, 0, 0]],\n    repetitionY: [1],\n    constantY: [[0, 3, 0]],\n    repetitionZ: [1],\n    constantZ: [[0, 0, 3]]\n  }); // Chaging states that are single valued\n\n  const onChangeState = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n    setState({ ...state,\n      [name]: value\n    });\n  }; // Chaging states that are arrayed valued\n\n\n  const onChangeStateArray = e => {\n    let name = e.target.name;\n    let value = parseFloat(e.target.value) || 0;\n    let theIndex = parseInt(e.target.title.split(' ')[1]);\n    setState({ ...state,\n      [name]: [...state[name].slice(0, theIndex), value, ...state[name].slice(theIndex + 1)]\n    });\n  }; // Chaging states that are double order arrayed valued\n\n\n  const onChangeStateArrayDouble = e => {\n    let name = e.target.name;\n    let value = parseFloat(e.target.value) || 0;\n    let theIndex = parseInt(e.target.title.split(' ')[1]);\n    let theIndexAtom = parseInt(e.target.title.split(' ')[3]) - 1;\n    setState({ ...state,\n      [name]: [...state[name].slice(0, theIndex), [...state[name][theIndex].slice(0, theIndexAtom), value, ...state[name][theIndex].slice(theIndexAtom + 1)], ...state[name].slice(theIndex + 1)]\n    });\n  }; // List of Constants\n\n\n  const [angles, setAngles] = useState([0, 0]);\n  const [visualDistance, setVisualDistance] = useState(10);\n  const [stretches, setStretches] = useState([0, 0, 0]);\n  const [clickStatus, setClickStatus] = useState(false);\n  const [positionMouse, setPositionMouse] = useState([0, 0]);\n  const [dataToPlotX, setDataToPlotX] = useState([1, 2, 3]);\n  const [dataToPlotY, setDataToPlotY] = useState([1, 2, 3]);\n  const [dataToPlotZ, setDataToPlotZ] = useState([1, 2, 3]);\n  const [speciesAtoms, setSpeciesAtoms] = useState([1, 1, 1]);\n  const [species, setSpecies] = useState([1]);\n  const [selectedPoint, setSelectedPoint] = useState(100);\n  const [removedData, setRemovedData] = useState([]);\n  const [typeOfDataRotation, setTypeOfDataRotation] = useState('none');\n  const [angleRotatedData, setAngleRotatedData] = useState(180); // Matrix multiplication\n\n  const matrixMultiplication = (mat1, mat2) => {\n    let resultantMatrix = [];\n\n    for (let i = 0; i < mat2[0].length; i++) {\n      let oneRow = [];\n\n      for (let j = 0; j < mat1.length; j++) {\n        let oneTerm = 0;\n\n        for (let k = 0; k < mat1.length; k++) {\n          oneTerm += parseFloat((mat1[j][k] * mat2[k][i]).toFixed(10));\n        }\n\n        oneRow.push(oneTerm);\n      }\n\n      resultantMatrix.push(oneRow);\n    }\n\n    return resultantMatrix;\n  }; // Uploading files\n\n\n  const onUploadedFile = e => {\n    let setX = [];\n    let setY = [];\n    let setZ = [];\n    let setSpec = [];\n    let allLatConst = [];\n    let speciesInCome = [];\n    let length = e.target.files.length;\n\n    for (let fil = 0; fil < length; fil++) {\n      var theFile = e.target.files[fil];\n      let reader = new FileReader();\n\n      reader.onload = e => {\n        const text = e.target.result;\n        const bigXSF = text.includes('INFO');\n        let splittedText = text.split(/PRIMVEC\\n|PRIMCOORD\\n|CONVVEC\\n|ATOMS\\n|FRAMES\\n/);\n        let primVec = splittedText[1].split('\\n').slice(0, 3);\n        let primCoord;\n\n        if (bigXSF) {\n          primCoord = splittedText[6].split('\\n');\n        } else {\n          primCoord = splittedText[2].split('\\n');\n        }\n\n        let primitiveVectors = [];\n        primVec.forEach(element => {\n          let row = element.split(' ').filter(fileElem => fileElem.length > 0);\n          primitiveVectors = [...primitiveVectors, row.map(element => parseFloat(element))];\n        });\n        allLatConst = [...allLatConst, primitiveVectors];\n        let indexToStart = bigXSF ? 0 : 1;\n        let datX = [];\n        let datY = [];\n        let datZ = [];\n        let species = [];\n\n        for (let i = indexToStart; i < primCoord.length; i++) {\n          let row = primCoord[i].split(' ').filter(fileElem => fileElem.length > 0);\n\n          if (row.length > 0) {\n            species = [...species, parseInt(row[0])];\n            datX = [...datX, parseFloat(row[1])];\n            datY = [...datY, parseFloat(row[2])];\n            datZ = [...datZ, parseFloat(row[3])];\n          }\n        }\n\n        setX = [...setX, ...datX];\n        setY = [...setY, ...datY];\n        setZ = [...setZ, ...datZ];\n        setSpec = [...setSpec, ...species];\n        let allSeciesInOneFor = [];\n\n        for (let i = 0; i < species.length; i++) {\n          let thSpec = species[i];\n\n          if (!allSeciesInOneFor.includes(thSpec)) {\n            allSeciesInOneFor = [...allSeciesInOneFor, thSpec];\n          }\n        }\n\n        speciesInCome = [...speciesInCome, allSeciesInOneFor];\n\n        if (fil === length - 1) {\n          setDataToPlotX(setX);\n          setDataToPlotY(setY);\n          setDataToPlotZ(setZ);\n          setSpeciesAtoms(setSpec);\n          let arrInBetween = [];\n\n          for (let i = 0; i < speciesInCome.length; i++) {\n            for (let j = 0; j < speciesInCome[i].length; j++) {\n              arrInBetween = [...arrInBetween, [speciesInCome[i][j], i]];\n            }\n          }\n\n          speciesInCome = [...arrInBetween.sort((a, b) => a[0] - b[0])];\n          let allSecies = [];\n\n          for (let i = 0; i < setSpec.length; i++) {\n            let thSpec = setSpec[i];\n\n            if (!allSecies.includes(thSpec)) {\n              allSecies = [...allSecies, thSpec];\n            }\n          }\n\n          let xConstXPush = [];\n          let yConstXPush = [];\n          let zConstXPush = [];\n\n          for (let j = 0; j < speciesInCome.length; j++) {\n            let speciesSet = speciesInCome[j][0];\n            let theIndex = speciesInCome[j][1];\n\n            for (let i = 0; i < allSecies.length; i++) {\n              let lookSpecies = allSecies[i];\n\n              if (speciesSet === lookSpecies) {\n                xConstXPush = [...xConstXPush, allLatConst[theIndex][0]];\n                yConstXPush = [...yConstXPush, allLatConst[theIndex][1]];\n                zConstXPush = [...zConstXPush, allLatConst[theIndex][2]];\n                break;\n              }\n            }\n          }\n\n          setState({ ...state,\n            'translateX': Array(allSecies.length).fill(0),\n            'translateY': Array(allSecies.length).fill(0),\n            'translateZ': Array(allSecies.length).fill(0),\n            \"repetitionX\": Array(allSecies.length).fill(1),\n            \"repetitionY\": Array(allSecies.length).fill(1),\n            \"repetitionZ\": Array(allSecies.length).fill(1),\n            \"constantX\": xConstXPush,\n            \"constantY\": yConstXPush,\n            \"constantZ\": zConstXPush\n          });\n          setSpecies(allSecies.sort((a, b) => a - b));\n        }\n      };\n\n      reader.readAsText(theFile);\n    }\n  };\n\n  const clickPressed = e => {\n    setClickStatus(true);\n    setPositionMouse([e.clientX, e.clientY]);\n  };\n\n  const changeOnListener = e => {\n    if (clickStatus) {\n      let xInReturn = positionMouse[0];\n      let yInReturn = positionMouse[1];\n      let angleX = angles[0];\n      let angleY = angles[1];\n\n      if (e.clientX > xInReturn) {\n        angleX += Math.abs(e.clientX - xInReturn);\n      } else {\n        angleX -= Math.abs(e.clientX - xInReturn);\n      }\n\n      if (e.clientY > yInReturn) {\n        angleY += Math.abs(e.clientY - yInReturn);\n      } else {\n        angleY -= Math.abs(e.clientY - yInReturn);\n      }\n\n      xInReturn = e.clientX;\n      yInReturn = e.clientY;\n      setPositionMouse([xInReturn, yInReturn]);\n      setAngles([angleX, angleY]);\n    }\n  };\n\n  const onRotationChange = e => {\n    let axisRotated = e.target.name;\n    let result = e.target.value || 0;\n    let index = 0;\n\n    switch (axisRotated) {\n      case 'y':\n        index = 1;\n        break;\n\n      default:\n        index = 0;\n    }\n\n    setAngles([...angles.slice(0, index), parseFloat(result), ...angles.slice(index + 1)]);\n  };\n\n  const zoomInOut = e => {\n    let sign = e.deltaY / 530;\n    setVisualDistance(visualDistance * (sign + 1));\n  };\n\n  const [dataMultiX, setDataMultiX] = useState([]);\n  const [dataMultiY, setDataMultiY] = useState([]);\n  const [dataMultiZ, setDataMultiZ] = useState([]);\n  const [allMultiSpec, setAllMultiSpec] = useState(speciesAtoms);\n  useEffect(() => {\n    let arrayX = [...dataToPlotX];\n    let arrayY = [...dataToPlotY];\n    let arrayZ = [...dataToPlotZ];\n    let speciesMulti = [...speciesAtoms];\n    let xForPush = [];\n    let yForPush = [];\n    let zForPush = [];\n    let specForPush = [];\n\n    for (let i = 0; i < arrayX.length; i++) {\n      let atomIndex = species.indexOf(speciesAtoms[i]);\n\n      if (state.repetitionX[atomIndex] !== 0) {\n        for (let j = 0; j < state.repetitionX[atomIndex]; j++) {\n          xForPush = [...xForPush, arrayX[i] / 1 + state.constantX[atomIndex][0] * j];\n          yForPush = [...yForPush, arrayY[i] / 1 + state.constantX[atomIndex][1] * j];\n          zForPush = [...zForPush, arrayZ[i] / 1 + state.constantX[atomIndex][2] * j];\n          specForPush = [...specForPush, speciesMulti[i]];\n        }\n      }\n    }\n\n    arrayX = [...xForPush];\n    arrayY = [...yForPush];\n    arrayZ = [...zForPush];\n    speciesMulti = [...specForPush];\n    xForPush = [];\n    yForPush = [];\n    zForPush = [];\n    specForPush = [];\n\n    for (let i = 0; i < arrayY.length; i++) {\n      let atomIndex = species.indexOf(speciesMulti[i]);\n\n      if (state.repetitionY[atomIndex] !== 0) {\n        for (let j = 0; j < state.repetitionY[atomIndex]; j++) {\n          xForPush = [...xForPush, arrayX[i] / 1 + state.constantY[atomIndex][0] * j];\n          yForPush = [...yForPush, arrayY[i] / 1 + state.constantY[atomIndex][1] * j];\n          zForPush = [...zForPush, arrayZ[i] / 1 + state.constantY[atomIndex][2] * j];\n          specForPush = [...specForPush, speciesMulti[i]];\n        }\n      }\n    }\n\n    arrayX = [...xForPush];\n    arrayY = [...yForPush];\n    arrayZ = [...zForPush];\n    speciesMulti = [...specForPush];\n    xForPush = [];\n    yForPush = [];\n    zForPush = [];\n    specForPush = [];\n\n    for (let i = 0; i < arrayZ.length; i++) {\n      let atomIndex = species.indexOf(speciesMulti[i]);\n\n      if (state.repetitionZ[atomIndex] !== 0) {\n        for (let j = 0; j < state.repetitionZ[atomIndex]; j++) {\n          xForPush = [...xForPush, arrayX[i] / 1 + state.constantZ[atomIndex][0] * j];\n          yForPush = [...yForPush, arrayY[i] / 1 + state.constantZ[atomIndex][1] * j];\n          zForPush = [...zForPush, arrayZ[i] / 1 + state.constantZ[atomIndex][2] * j];\n          specForPush = [...specForPush, speciesMulti[i]];\n        }\n      }\n    }\n\n    arrayX = [...xForPush];\n    arrayY = [...yForPush];\n    arrayZ = [...zForPush];\n    speciesMulti = [...specForPush];\n    setDataMultiX(arrayX);\n    setDataMultiY(arrayY);\n    setDataMultiZ(arrayZ);\n    setAllMultiSpec(speciesMulti);\n  }, [state.constantX, state.repetitionX, state.constantZ, state.repetitionZ, state.constantY, state.repetitionY, species]);\n  const [dataX, setDataX] = useState([]);\n  const [dataY, setDataY] = useState([]);\n  const [dataZ, setDataZ] = useState([]);\n  useEffect(() => {\n    let datXHere = [];\n    let datYHere = [];\n    let datZHere = [];\n\n    for (let i = 0; i < dataMultiX.length; i++) {\n      let trIndex = species.indexOf(allMultiSpec[i]);\n      datXHere = [...datXHere, dataMultiX[i] / 1 + state.translateX[trIndex] / 1];\n      datYHere = [...datYHere, dataMultiY[i] / 1 + state.translateY[trIndex] / 1];\n      datZHere = [...datZHere, dataMultiZ[i] / 1 + state.translateZ[trIndex] / 1];\n    }\n\n    let xRotated = [];\n    let yRotated = [];\n    let zRotated = [];\n\n    switch (typeOfDataRotation) {\n      case 'x':\n        let xMatrixRot = [[1, 0, 0], [0, Math.cos(angleRotatedData * Math.PI / 180), -Math.sin(angleRotatedData * Math.PI / 180)], [0, Math.sin(angleRotatedData * Math.PI / 180), Math.cos(angleRotatedData * Math.PI / 180)]];\n\n        for (let i = 0; i < datXHere.length; i++) {\n          let vec = [[datXHere[i]], [datYHere[i]], [datZHere[i]]];\n          let newCoord = matrixMultiplication(xMatrixRot, vec)[0];\n          xRotated.push(newCoord[0]);\n          yRotated.push(newCoord[1]);\n          zRotated.push(newCoord[2]);\n        }\n\n        break;\n\n      case 'y':\n        let yMatrixRot = [[Math.cos(angleRotatedData * Math.PI / 180), 0, Math.sin(angleRotatedData * Math.PI / 180)], [0, 1, 0], [-Math.sin(angleRotatedData * Math.PI / 180), 0, Math.cos(angleRotatedData * Math.PI / 180)]];\n\n        for (let i = 0; i < datXHere.length; i++) {\n          let vec = [[datXHere[i]], [datYHere[i]], [datZHere[i]]];\n          let newCoord = matrixMultiplication(yMatrixRot, vec)[0];\n          xRotated.push(newCoord[0]);\n          yRotated.push(newCoord[1]);\n          zRotated.push(newCoord[2]);\n        }\n\n        break;\n\n      case 'z':\n        let zMatrixRot = [[Math.cos(angleRotatedData * Math.PI / 180), -Math.sin(angleRotatedData * Math.PI / 180), 0], [Math.sin(angleRotatedData * Math.PI / 180), Math.cos(angleRotatedData * Math.PI / 180), 0], [0, 0, 1]];\n\n        for (let i = 0; i < datXHere.length; i++) {\n          let vec = [[datXHere[i]], [datYHere[i]], [datZHere[i]]];\n          let newCoord = matrixMultiplication(zMatrixRot, vec)[0];\n          xRotated.push(newCoord[0]);\n          yRotated.push(newCoord[1]);\n          zRotated.push(newCoord[2]);\n        }\n\n        break;\n\n      default:\n        xRotated = datXHere;\n        yRotated = datYHere;\n        zRotated = datZHere;\n        break;\n    }\n\n    let xStretch = stretches[0] || 0;\n    let yStretch = stretches[1] || 0;\n    let zStretch = stretches[2] || 0;\n    let xStretched = [];\n    let yStretched = [];\n    let zStretched = [];\n    let cellX = state.constantX[0][0] * state.repetitionZ[0];\n    let cellY = state.constantY[0][1] * state.repetitionZ[0];\n    let cellZ = state.constantZ[0][2] * state.repetitionZ[0];\n\n    for (let l = 0; l < xRotated.length; l++) {\n      xStretched.push(xRotated[l] + xRotated[l] / cellX * xStretch);\n      yStretched.push(yRotated[l] + yRotated[l] / cellY * yStretch);\n      zStretched.push(zRotated[l] + zRotated[l] / cellZ * zStretch);\n    }\n\n    setDataX(xStretched);\n    setDataY(yStretched);\n    setDataZ(zStretched);\n  }, [state.translateX, state.translateY, state.translateZ, dataMultiX, species, typeOfDataRotation, angleRotatedData, stretches]);\n\n  const onRemoveData = e => {\n    let index = parseInt(e.target.name);\n\n    if (!removedData.includes(index)) {\n      setRemovedData([...removedData, index]);\n    }\n  };\n\n  const onAddData = e => {\n    let index = parseInt(e.target.name);\n\n    if (removedData.includes(index)) {\n      let positionRemoved = removedData.indexOf(index);\n      setRemovedData([...removedData.slice(0, positionRemoved), ...removedData.slice(positionRemoved + 1)]);\n    }\n  };\n\n  const onChangeDataRotationType = e => {\n    setTypeOfDataRotation(e.target.value);\n  };\n\n  const onChangeDataRotationAngle = e => {\n    let angleRot = parseFloat(e.target.value) || 180;\n    setAngleRotatedData(angleRot);\n  };\n\n  const onChangeStretches = e => {\n    let index = 0;\n    let axisType = e.target.title.split('')[0];\n\n    switch (axisType) {\n      case \"y\":\n        index = 1;\n        break;\n\n      case \"z\":\n        index = 2;\n        break;\n\n      default:\n        index = 0;\n        break;\n    }\n\n    setStretches([...stretches.slice(0, index), parseFloat(e.target.value), ...stretches.slice(index + 1)]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas\",\n      children: /*#__PURE__*/_jsxDEV(Structure, {\n        stretches: stretches,\n        angles: angles,\n        changeOnListener: e => changeOnListener(e),\n        releaseClick: () => setClickStatus(false),\n        performClick: e => clickPressed(e),\n        zoomInOut: e => zoomInOut(e),\n        visualDistance: visualDistance,\n        dataToPlotX: dataToPlotX,\n        dataToPlotY: dataToPlotY,\n        dataToPlotZ: dataToPlotZ,\n        speciesAtoms: speciesAtoms,\n        state: state,\n        species: species.sort((a, b) => a - b),\n        dataX: dataX,\n        dataY: dataY,\n        dataZ: dataZ,\n        allMultiSpec: allMultiSpec,\n        selectedPoint: selectedPoint,\n        removedData: removedData,\n        angleRotatedData: angleRotatedData,\n        typeOfDataRotation: typeOfDataRotation,\n        matrixMultiplication: (mat1, mat2) => matrixMultiplication(mat1, mat2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ControlPannel\",\n      children: [/*#__PURE__*/_jsxDEV(UploadFiles, {\n        onUploadedFile: e => onUploadedFile(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rotations, {\n        stretches: stretches,\n        onChangeStretches: e => onChangeStretches(e),\n        angles: angles,\n        onRotationChange: e => onRotationChange(e),\n        onChangeState: e => onChangeState(e),\n        state: state,\n        onChangeDataRotationType: e => onChangeDataRotationType(e),\n        onChangeDataRotationAngle: e => onChangeDataRotationAngle(e),\n        angleRotatedData: angleRotatedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataAndElements\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setToShowPannel(\"Elements\"),\n          className: \"download\",\n          children: \"Elements\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setToShowPannel(\"Data\"),\n          className: \"download\",\n          children: \"Data \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 11\n      }, this), toShowPannel === \"Elements\" ? /*#__PURE__*/_jsxDEV(SpeciesControl, {\n        onChangeState: e => onChangeState(e),\n        onChangeStateArray: e => onChangeStateArray(e),\n        onChangeStateArrayDouble: e => onChangeStateArrayDouble(e),\n        state: state,\n        species: species,\n        atoms: atoms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(DataPoints, {\n        dataX: dataX,\n        dataY: dataY,\n        dataZ: dataZ,\n        allMultiSpec: allMultiSpec,\n        dataClicked: numberData => setSelectedPoint(numberData),\n        onRemoveData: e => onRemoveData(e),\n        onAddData: e => onAddData(e),\n        removedData: removedData,\n        selectedPoint: selectedPoint,\n        state: state,\n        species: species,\n        atoms: atoms,\n        order: order,\n        setOrder: e => setOrder(e),\n        angleRotatedData: angleRotatedData,\n        typeOfDataRotation: typeOfDataRotation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"roqA8OOrwCvldodaac83TehezJ8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/pantis/Documents/webystall/src/App.js"],"names":["Structure","Rotations","useState","useEffect","UploadFiles","SpeciesControl","DataPoints","App","console","log","atoms","split","toShowPannel","setToShowPannel","order","setOrder","state","setState","showAxis","maxBound","translateX","translateY","translateZ","repetitionX","constantX","repetitionY","constantY","repetitionZ","constantZ","onChangeState","e","name","target","value","onChangeStateArray","parseFloat","theIndex","parseInt","title","slice","onChangeStateArrayDouble","theIndexAtom","angles","setAngles","visualDistance","setVisualDistance","stretches","setStretches","clickStatus","setClickStatus","positionMouse","setPositionMouse","dataToPlotX","setDataToPlotX","dataToPlotY","setDataToPlotY","dataToPlotZ","setDataToPlotZ","speciesAtoms","setSpeciesAtoms","species","setSpecies","selectedPoint","setSelectedPoint","removedData","setRemovedData","typeOfDataRotation","setTypeOfDataRotation","angleRotatedData","setAngleRotatedData","matrixMultiplication","mat1","mat2","resultantMatrix","i","length","oneRow","j","oneTerm","k","toFixed","push","onUploadedFile","setX","setY","setZ","setSpec","allLatConst","speciesInCome","files","fil","theFile","reader","FileReader","onload","text","result","bigXSF","includes","splittedText","primVec","primCoord","primitiveVectors","forEach","element","row","filter","fileElem","map","indexToStart","datX","datY","datZ","allSeciesInOneFor","thSpec","arrInBetween","sort","a","b","allSecies","xConstXPush","yConstXPush","zConstXPush","speciesSet","lookSpecies","Array","fill","readAsText","clickPressed","clientX","clientY","changeOnListener","xInReturn","yInReturn","angleX","angleY","Math","abs","onRotationChange","axisRotated","index","zoomInOut","sign","deltaY","dataMultiX","setDataMultiX","dataMultiY","setDataMultiY","dataMultiZ","setDataMultiZ","allMultiSpec","setAllMultiSpec","arrayX","arrayY","arrayZ","speciesMulti","xForPush","yForPush","zForPush","specForPush","atomIndex","indexOf","dataX","setDataX","dataY","setDataY","dataZ","setDataZ","datXHere","datYHere","datZHere","trIndex","xRotated","yRotated","zRotated","xMatrixRot","cos","PI","sin","vec","newCoord","yMatrixRot","zMatrixRot","xStretch","yStretch","zStretch","xStretched","yStretched","zStretched","cellX","cellY","cellZ","l","onRemoveData","onAddData","positionRemoved","onChangeDataRotationType","onChangeDataRotationAngle","angleRot","onChangeStretches","axisType","numberData"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,KAAK,GAAG,0VAA0VC,KAA1V,CAAgW,GAAhW,CAAd;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,UAAD,CAAhD;AACA,QAAM,CAACY,KAAD,EAAOC,QAAP,IAAmBb,QAAQ,CAAC,SAAD,CAAjC,CAPa,CASb;;AACA,QAAM,CAACc,KAAD,EAAOC,QAAP,IAAmBf,QAAQ,CAAC;AAChCgB,IAAAA,QAAQ,EAAC,IADuB;AAEhCC,IAAAA,QAAQ,EAAC,GAFuB;AAGhCC,IAAAA,UAAU,EAAC,CAAC,CAAD,CAHqB;AAIhCC,IAAAA,UAAU,EAAC,CAAC,CAAD,CAJqB;AAKhCC,IAAAA,UAAU,EAAC,CAAC,CAAD,CALqB;AAMhCC,IAAAA,WAAW,EAAC,CAAC,CAAD,CANoB;AAOhCC,IAAAA,SAAS,EAAC,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAPsB;AAQhCC,IAAAA,WAAW,EAAC,CAAC,CAAD,CARoB;AAShCC,IAAAA,SAAS,EAAC,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CATsB;AAUhCC,IAAAA,WAAW,EAAC,CAAC,CAAD,CAVoB;AAWhCC,IAAAA,SAAS,EAAC,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD;AAXsB,GAAD,CAAjC,CAVa,CAwBb;;AACA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AAC3B,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,QAAIE,KAAK,GAAGH,CAAC,CAACE,MAAF,CAASC,KAArB;AACAhB,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,OAACe,IAAD,GAAOE;AAFA,KAAD,CAAR;AAID,GAPD,CAzBa,CAkCb;;;AACA,QAAMC,kBAAkB,GAAIJ,CAAD,IAAO;AAChC,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,QAAIE,KAAK,GAAGE,UAAU,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,IAA8B,CAA1C;AACA,QAAIG,QAAQ,GAAGC,QAAQ,CAACP,CAAC,CAACE,MAAF,CAASM,KAAT,CAAe3B,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAD,CAAvB;AACAM,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,OAACe,IAAD,GAAQ,CACN,GAAGf,KAAK,CAACe,IAAD,CAAL,CAAYQ,KAAZ,CAAkB,CAAlB,EAAoBH,QAApB,CADG,EAENH,KAFM,EAGN,GAAGjB,KAAK,CAACe,IAAD,CAAL,CAAYQ,KAAZ,CAAkBH,QAAQ,GAAC,CAA3B,CAHG;AAFD,KAAD,CAAR;AAQD,GAZD,CAnCa,CAiDZ;;;AACA,QAAMI,wBAAwB,GAAIV,CAAD,IAAO;AACvC,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,QAAIE,KAAK,GAAGE,UAAU,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,IAA8B,CAA1C;AACA,QAAIG,QAAQ,GAAGC,QAAQ,CAACP,CAAC,CAACE,MAAF,CAASM,KAAT,CAAe3B,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAD,CAAvB;AACA,QAAI8B,YAAY,GAAGJ,QAAQ,CAACP,CAAC,CAACE,MAAF,CAASM,KAAT,CAAe3B,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAD,CAAR,GAAuC,CAA1D;AACAM,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,OAACe,IAAD,GAAQ,CACN,GAAGf,KAAK,CAACe,IAAD,CAAL,CAAYQ,KAAZ,CAAkB,CAAlB,EAAoBH,QAApB,CADG,EAEN,CACE,GAAGpB,KAAK,CAACe,IAAD,CAAL,CAAYK,QAAZ,EAAsBG,KAAtB,CAA4B,CAA5B,EAA8BE,YAA9B,CADL,EAEIR,KAFJ,EAGE,GAAGjB,KAAK,CAACe,IAAD,CAAL,CAAYK,QAAZ,EAAsBG,KAAtB,CAA4BE,YAAY,GAAC,CAAzC,CAHL,CAFM,EAON,GAAGzB,KAAK,CAACe,IAAD,CAAL,CAAYQ,KAAZ,CAAkBH,QAAQ,GAAC,CAA3B,CAPG;AAFD,KAAD,CAAR;AAYD,GAjBA,CAlDY,CAqEb;;;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBzC,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAApC;AACA,QAAM,CAAC0C,cAAD,EAAiBC,iBAAjB,IAAsC3C,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC4C,SAAD,EAAYC,YAAZ,IAA4B7C,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAA1C;AACA,QAAM,CAAC8C,WAAD,EAAcC,cAAd,IAAgC/C,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACgD,aAAD,EAAgBC,gBAAhB,IAAoCjD,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAAlD;AACA,QAAM,CAACkD,WAAD,EAAcC,cAAd,IAAgCnD,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAA9C;AACA,QAAM,CAACoD,WAAD,EAAcC,cAAd,IAAgCrD,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAA9C;AACA,QAAM,CAACsD,WAAD,EAAcC,cAAd,IAAgCvD,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAA9C;AACA,QAAM,CAACwD,YAAD,EAAeC,eAAf,IAAkCzD,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,CAAhD;AACA,QAAM,CAAC0D,OAAD,EAAUC,UAAV,IAAwB3D,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAtC;AACA,QAAM,CAAC4D,aAAD,EAAgBC,gBAAhB,IAAoC7D,QAAQ,CAAC,GAAD,CAAlD;AACA,QAAM,CAAC8D,WAAD,EAAcC,cAAd,IAAgC/D,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgE,kBAAD,EAAqBC,qBAArB,IAA8CjE,QAAQ,CAAC,MAAD,CAA5D;AACA,QAAM,CAACkE,gBAAD,EAAmBC,mBAAnB,IAA0CnE,QAAQ,CAAC,GAAD,CAAxD,CAnFa,CAqFb;;AACA,QAAMoE,oBAAoB,GAAG,CAACC,IAAD,EAAMC,IAAN,KAAe;AAC1C,QAAIC,eAAe,GAAG,EAAtB;;AACA,SAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACF,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,UAAIE,MAAM,GAAG,EAAb;;AACE,WAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACN,IAAI,CAACI,MAArB,EAA4BE,CAAC,EAA7B,EAAgC;AAChC,YAAIC,OAAO,GAAG,CAAd;;AACA,aAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAACR,IAAI,CAACI,MAArB,EAA4BI,CAAC,EAA7B,EAAgC;AAC9BD,UAAAA,OAAO,IAAI3C,UAAU,CAAC,CAACoC,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,IAAWP,IAAI,CAACO,CAAD,CAAJ,CAAQL,CAAR,CAAZ,EAAwBM,OAAxB,CAAgC,EAAhC,CAAD,CAArB;AACD;;AACDJ,QAAAA,MAAM,CAACK,IAAP,CAAYH,OAAZ;AACD;;AACDL,MAAAA,eAAe,CAACQ,IAAhB,CAAqBL,MAArB;AACD;;AACD,WAAOH,eAAP;AACD,GAdD,CAtFa,CAqGb;;;AACA,QAAMS,cAAc,GAAIpD,CAAD,IAAO;AAC5B,QAAIqD,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,aAAa,GAAG,EAApB;AAEA,QAAIb,MAAM,GAAG7C,CAAC,CAACE,MAAF,CAASyD,KAAT,CAAed,MAA5B;;AACA,SAAI,IAAIe,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAACf,MAArB,EAA6Be,GAAG,EAAhC,EAAmC;AACjC,UAAIC,OAAO,GAAG7D,CAAC,CAACE,MAAF,CAASyD,KAAT,CAAeC,GAAf,CAAd;AACA,UAAIE,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAiBhE,CAAD,IAAO;AACrB,cAAMiE,IAAI,GAAGjE,CAAC,CAACE,MAAF,CAASgE,MAAtB;AACA,cAAMC,MAAM,GAAGF,IAAI,CAACG,QAAL,CAAc,MAAd,CAAf;AACA,YAAIC,YAAY,GAAGJ,IAAI,CAACpF,KAAL,CAAW,kDAAX,CAAnB;AACA,YAAIyF,OAAO,GAAID,YAAY,CAAC,CAAD,CAAZ,CAAgBxF,KAAhB,CAAsB,IAAtB,CAAD,CAA8B4B,KAA9B,CAAoC,CAApC,EAAsC,CAAtC,CAAd;AACA,YAAI8D,SAAJ;;AACA,YAAGJ,MAAH,EAAW;AACTI,UAAAA,SAAS,GAAGF,YAAY,CAAC,CAAD,CAAZ,CAAgBxF,KAAhB,CAAsB,IAAtB,CAAZ;AACD,SAFD,MAEO;AACL0F,UAAAA,SAAS,GAAGF,YAAY,CAAC,CAAD,CAAZ,CAAgBxF,KAAhB,CAAsB,IAAtB,CAAZ;AACD;;AACD,YAAI2F,gBAAgB,GAAG,EAAvB;AACAF,QAAAA,OAAO,CAACG,OAAR,CAAgBC,OAAO,IAAI;AACzB,cAAIC,GAAG,GAAGD,OAAO,CAAC7F,KAAR,CAAc,GAAd,EAAmB+F,MAAnB,CAA2BC,QAAD,IAAeA,QAAQ,CAAChC,MAAT,GAAgB,CAAzD,CAAV;AACA2B,UAAAA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAqBG,GAAG,CAACG,GAAJ,CAASJ,OAAD,IAAcrE,UAAU,CAACqE,OAAD,CAAhC,CAArB,CAAnB;AACD,SAHD;AAKAjB,QAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBe,gBAAhB,CAAd;AACA,YAAIO,YAAY,GAAGZ,MAAM,GAAE,CAAF,GAAI,CAA7B;AACA,YAAIa,IAAI,GAAG,EAAX;AACA,YAAIC,IAAI,GAAG,EAAX;AACA,YAAIC,IAAI,GAAG,EAAX;AACA,YAAIpD,OAAO,GAAG,EAAd;;AACA,aAAI,IAAIc,CAAC,GAAGmC,YAAZ,EAA0BnC,CAAC,GAAC2B,SAAS,CAAC1B,MAAtC,EAA6CD,CAAC,EAA9C,EAAiD;AAC/C,cAAI+B,GAAG,GAAGJ,SAAS,CAAC3B,CAAD,CAAT,CAAa/D,KAAb,CAAmB,GAAnB,EAAwB+F,MAAxB,CAAgCC,QAAD,IAAeA,QAAQ,CAAChC,MAAT,GAAgB,CAA9D,CAAV;;AACA,cAAG8B,GAAG,CAAC9B,MAAJ,GAAW,CAAd,EAAgB;AACdf,YAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAYvB,QAAQ,CAACoE,GAAG,CAAC,CAAD,CAAJ,CAApB,CAAV;AACAK,YAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS3E,UAAU,CAACsE,GAAG,CAAC,CAAD,CAAJ,CAAnB,CAAP;AACAM,YAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS5E,UAAU,CAACsE,GAAG,CAAC,CAAD,CAAJ,CAAnB,CAAP;AACAO,YAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS7E,UAAU,CAACsE,GAAG,CAAC,CAAD,CAAJ,CAAnB,CAAP;AACD;AACF;;AAEDtB,QAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS,GAAG2B,IAAZ,CAAP;AACA1B,QAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS,GAAG2B,IAAZ,CAAP;AACA1B,QAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAS,GAAG2B,IAAZ,CAAP;AACA1B,QAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAY,GAAG1B,OAAf,CAAV;AAEA,YAAIqD,iBAAiB,GAAG,EAAxB;;AACA,aAAI,IAAIvC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEd,OAAO,CAACe,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AACpC,cAAIwC,MAAM,GAAGtD,OAAO,CAACc,CAAD,CAApB;;AACA,cAAG,CAACuC,iBAAiB,CAACf,QAAlB,CAA2BgB,MAA3B,CAAJ,EAAuC;AACrCD,YAAAA,iBAAiB,GAAG,CAAC,GAAGA,iBAAJ,EAAsBC,MAAtB,CAApB;AACD;AACF;;AACD1B,QAAAA,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAkByB,iBAAlB,CAAhB;;AAGA,YAAGvB,GAAG,KAAKf,MAAM,GAAC,CAAlB,EAAoB;AAClBtB,UAAAA,cAAc,CAAC8B,IAAD,CAAd;AACA5B,UAAAA,cAAc,CAAC6B,IAAD,CAAd;AACA3B,UAAAA,cAAc,CAAC4B,IAAD,CAAd;AACA1B,UAAAA,eAAe,CAAC2B,OAAD,CAAf;AACA,cAAI6B,YAAY,GAAG,EAAnB;;AACA,eAAI,IAAIzC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACc,aAAa,CAACb,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACzC,iBAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACW,aAAa,CAACd,CAAD,CAAb,CAAiBC,MAAlC,EAA0CE,CAAC,EAA3C,EAA8C;AAC5CsC,cAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAiB,CAAC3B,aAAa,CAACd,CAAD,CAAb,CAAiBG,CAAjB,CAAD,EAAqBH,CAArB,CAAjB,CAAf;AACD;AACF;;AACDc,UAAAA,aAAa,GAAG,CAAC,GAAG2B,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAC,CAAC,CAAD,CAAjC,CAAJ,CAAhB;AACA,cAAIC,SAAS,GAAG,EAAhB;;AACA,eAAI,IAAI7C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEY,OAAO,CAACX,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AACpC,gBAAIwC,MAAM,GAAG5B,OAAO,CAACZ,CAAD,CAApB;;AACA,gBAAG,CAAC6C,SAAS,CAACrB,QAAV,CAAmBgB,MAAnB,CAAJ,EAA+B;AAC7BK,cAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAcL,MAAd,CAAZ;AACD;AACF;;AACD,cAAIM,WAAW,GAAG,EAAlB;AACA,cAAIC,WAAW,GAAG,EAAlB;AACA,cAAIC,WAAW,GAAG,EAAlB;;AACA,eAAI,IAAI7C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACW,aAAa,CAACb,MAA/B,EAAuCE,CAAC,EAAxC,EAA2C;AACzC,gBAAI8C,UAAU,GAAGnC,aAAa,CAACX,CAAD,CAAb,CAAiB,CAAjB,CAAjB;AACA,gBAAIzC,QAAQ,GAAIoD,aAAa,CAACX,CAAD,CAAb,CAAiB,CAAjB,CAAhB;;AACA,iBAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC6C,SAAS,CAAC5C,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AACpC,kBAAIkD,WAAW,GAAIL,SAAS,CAAC7C,CAAD,CAA5B;;AACA,kBAAGiD,UAAU,KAAKC,WAAlB,EAA8B;AAE5BJ,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBjC,WAAW,CAACnD,QAAD,CAAX,CAAsB,CAAtB,CAAhB,CAAd;AACAqF,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBlC,WAAW,CAACnD,QAAD,CAAX,CAAsB,CAAtB,CAAhB,CAAd;AACAsF,gBAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBnC,WAAW,CAACnD,QAAD,CAAX,CAAsB,CAAtB,CAAhB,CAAd;AACA;AACD;AACF;AACF;;AAEDnB,UAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,0BAAa6G,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CAFN;AAGP,0BAAaD,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CAHN;AAIP,0BAAaD,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CAJN;AAKP,2BAAcD,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CALP;AAMP,2BAAcD,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CANP;AAOP,2BAAcD,KAAK,CAACN,SAAS,CAAC5C,MAAX,CAAL,CAAwBmD,IAAxB,CAA6B,CAA7B,CAPP;AAQP,yBAAYN,WARL;AASP,yBAAYC,WATL;AAUP,yBAAYC;AAVL,WAAD,CAAR;AAYA7D,UAAAA,UAAU,CAAC0D,SAAS,CAACH,IAAV,CAAe,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CAA1B,CAAD,CAAV;AACD;AACF,OAnGD;;AAoGA1B,MAAAA,MAAM,CAACmC,UAAP,CAAkBpC,OAAlB;AACD;AACF,GAlHD;;AAmHA,QAAMqC,YAAY,GAAIlG,CAAD,IAAO;AAC1BmB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,gBAAgB,CAAC,CAACrB,CAAC,CAACmG,OAAH,EAAWnG,CAAC,CAACoG,OAAb,CAAD,CAAhB;AACD,GAHD;;AAIA,QAAMC,gBAAgB,GAAIrG,CAAD,IAAO;AAC9B,QAAGkB,WAAH,EAAe;AACb,UAAIoF,SAAS,GAAGlF,aAAa,CAAC,CAAD,CAA7B;AACA,UAAImF,SAAS,GAAGnF,aAAa,CAAC,CAAD,CAA7B;AACA,UAAIoF,MAAM,GAAG5F,MAAM,CAAC,CAAD,CAAnB;AACA,UAAI6F,MAAM,GAAG7F,MAAM,CAAC,CAAD,CAAnB;;AACA,UAAGZ,CAAC,CAACmG,OAAF,GAAUG,SAAb,EAAuB;AACrBE,QAAAA,MAAM,IAAIE,IAAI,CAACC,GAAL,CAAS3G,CAAC,CAACmG,OAAF,GAAUG,SAAnB,CAAV;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,IAAIE,IAAI,CAACC,GAAL,CAAS3G,CAAC,CAACmG,OAAF,GAAUG,SAAnB,CAAV;AACD;;AACD,UAAGtG,CAAC,CAACoG,OAAF,GAAUG,SAAb,EAAuB;AACrBE,QAAAA,MAAM,IAAIC,IAAI,CAACC,GAAL,CAAS3G,CAAC,CAACoG,OAAF,GAAUG,SAAnB,CAAV;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,IAAIC,IAAI,CAACC,GAAL,CAAS3G,CAAC,CAACoG,OAAF,GAAUG,SAAnB,CAAV;AACD;;AAEDD,MAAAA,SAAS,GAAGtG,CAAC,CAACmG,OAAd;AACAI,MAAAA,SAAS,GAAGvG,CAAC,CAACoG,OAAd;AACA/E,MAAAA,gBAAgB,CAAC,CAACiF,SAAD,EAAWC,SAAX,CAAD,CAAhB;AACA1F,MAAAA,SAAS,CAAC,CAAC2F,MAAD,EAAQC,MAAR,CAAD,CAAT;AACD;AACF,GAtBD;;AAuBA,QAAMG,gBAAgB,GAAI5G,CAAD,IAAO;AAC9B,QAAI6G,WAAW,GAAG7G,CAAC,CAACE,MAAF,CAASD,IAA3B;AACA,QAAIiE,MAAM,GAAGlE,CAAC,CAACE,MAAF,CAASC,KAAT,IAAkB,CAA/B;AACA,QAAI2G,KAAK,GAAG,CAAZ;;AACA,YAAOD,WAAP;AACE,WAAK,GAAL;AACEC,QAAAA,KAAK,GAAG,CAAR;AACA;;AACF;AACEA,QAAAA,KAAK,GAAG,CAAR;AALJ;;AAOAjG,IAAAA,SAAS,CAAC,CACR,GAAGD,MAAM,CAACH,KAAP,CAAa,CAAb,EAAeqG,KAAf,CADK,EAERzG,UAAU,CAAC6D,MAAD,CAFF,EAGR,GAAGtD,MAAM,CAACH,KAAP,CAAaqG,KAAK,GAAC,CAAnB,CAHK,CAAD,CAAT;AAKD,GAhBD;;AAiBA,QAAMC,SAAS,GAAI/G,CAAD,IAAO;AACvB,QAAIgH,IAAI,GAAGhH,CAAC,CAACiH,MAAF,GAAS,GAApB;AACAlG,IAAAA,iBAAiB,CAACD,cAAc,IAAEkG,IAAI,GAAC,CAAP,CAAf,CAAjB;AACD,GAHD;;AAKA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8B/I,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgJ,UAAD,EAAaC,aAAb,IAA8BjJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkJ,UAAD,EAAaC,aAAb,IAA8BnJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACoJ,YAAD,EAAeC,eAAf,IAAkCrJ,QAAQ,CAACwD,YAAD,CAAhD;AAEAvD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqJ,MAAM,GAAG,CAAC,GAAGpG,WAAJ,CAAb;AACA,QAAIqG,MAAM,GAAG,CAAC,GAAGnG,WAAJ,CAAb;AACA,QAAIoG,MAAM,GAAG,CAAC,GAAGlG,WAAJ,CAAb;AACA,QAAImG,YAAY,GAAG,CAAC,GAAGjG,YAAJ,CAAnB;AAEA,QAAIkG,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAI,IAAIrF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAE8E,MAAM,CAAC7E,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,UAAIsF,SAAS,GAAGpG,OAAO,CAACqG,OAAR,CAAgBvG,YAAY,CAACgB,CAAD,CAA5B,CAAhB;;AACA,UAAG1D,KAAK,CAACO,WAAN,CAAkByI,SAAlB,MAAiC,CAApC,EAAsC;AACpC,aAAI,IAAInF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAC7D,KAAK,CAACO,WAAN,CAAkByI,SAAlB,CAAhB,EAA8CnF,CAAC,EAA/C,EAAkD;AAChD+E,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC9E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACQ,SAAN,CAAgBwI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAgF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC/E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACQ,SAAN,CAAgBwI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAiF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAChF,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACQ,SAAN,CAAgBwI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAkF,UAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBJ,YAAY,CAACjF,CAAD,CAA5B,CAAd;AACD;AAEF;AACF;;AACD8E,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,YAAY,GAAG,CAAC,GAAGI,WAAJ,CAAf;AACCH,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,WAAW,GAAG,EAAd;;AACD,SAAI,IAAIrF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAE+E,MAAM,CAAC9E,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,UAAIsF,SAAS,GAAGpG,OAAO,CAACqG,OAAR,CAAgBN,YAAY,CAACjF,CAAD,CAA5B,CAAhB;;AACA,UAAG1D,KAAK,CAACS,WAAN,CAAkBuI,SAAlB,MAAiC,CAApC,EAAsC;AACpC,aAAI,IAAInF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAC7D,KAAK,CAACS,WAAN,CAAkBuI,SAAlB,CAAhB,EAA8CnF,CAAC,EAA/C,EAAkD;AAChD+E,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC9E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACU,SAAN,CAAgBsI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAgF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC/E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACU,SAAN,CAAgBsI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAiF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAChF,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACU,SAAN,CAAgBsI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAkF,UAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBJ,YAAY,CAACjF,CAAD,CAA5B,CAAd;AACD;AAEF;AACF;;AACD8E,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,YAAY,GAAG,CAAC,GAAGI,WAAJ,CAAf;AACAH,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,QAAQ,GAAG,EAAX;AACAC,IAAAA,WAAW,GAAG,EAAd;;AACD,SAAI,IAAIrF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAEgF,MAAM,CAAC/E,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AACjC,UAAIsF,SAAS,GAAGpG,OAAO,CAACqG,OAAR,CAAgBN,YAAY,CAACjF,CAAD,CAA5B,CAAhB;;AACA,UAAG1D,KAAK,CAACW,WAAN,CAAkBqI,SAAlB,MAAiC,CAApC,EAAsC;AACpC,aAAI,IAAInF,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAC7D,KAAK,CAACW,WAAN,CAAkBqI,SAAlB,CAAhB,EAA8CnF,CAAC,EAA/C,EAAkD;AAChD+E,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC9E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACY,SAAN,CAAgBoI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAgF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAC/E,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACY,SAAN,CAAgBoI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAiF,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcJ,MAAM,CAAChF,CAAD,CAAN,GAAU,CAAV,GAAY1D,KAAK,CAACY,SAAN,CAAgBoI,SAAhB,EAA2B,CAA3B,IAA+BnF,CAAzD,CAAX;AACAkF,UAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAgBJ,YAAY,CAACjF,CAAD,CAA5B,CAAd;AACD;AAEF;AACF;;AACD8E,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,MAAM,GAAG,CAAC,GAAGI,QAAJ,CAAT;AACAH,IAAAA,YAAY,GAAG,CAAC,GAAGI,WAAJ,CAAf;AAECd,IAAAA,aAAa,CAACO,MAAD,CAAb;AACAL,IAAAA,aAAa,CAACM,MAAD,CAAb;AACAJ,IAAAA,aAAa,CAACK,MAAD,CAAb;AACAH,IAAAA,eAAe,CAACI,YAAD,CAAf;AAED,GAxEQ,EAwEN,CAAC3I,KAAK,CAACQ,SAAP,EAAkBR,KAAK,CAACO,WAAxB,EAAoCP,KAAK,CAACY,SAA1C,EAAqDZ,KAAK,CAACW,WAA3D,EAAuEX,KAAK,CAACU,SAA7E,EAAwFV,KAAK,CAACS,WAA9F,EAA0GmC,OAA1G,CAxEM,CAAT;AA0EA,QAAM,CAACsG,KAAD,EAAQC,QAAR,IAAoBjK,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkK,KAAD,EAAQC,QAAR,IAAoBnK,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoK,KAAD,EAAQC,QAAR,IAAoBrK,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqK,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAI,IAAIhG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEsE,UAAU,CAACrE,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACvC,UAAIiG,OAAO,GAAG/G,OAAO,CAACqG,OAAR,CAAgBX,YAAY,CAAC5E,CAAD,CAA5B,CAAd;AAEA8F,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAaxB,UAAU,CAACtE,CAAD,CAAV,GAAc,CAAd,GAAgB1D,KAAK,CAACI,UAAN,CAAiBuJ,OAAjB,IAA0B,CAAvD,CAAX;AACAF,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAavB,UAAU,CAACxE,CAAD,CAAV,GAAc,CAAd,GAAgB1D,KAAK,CAACK,UAAN,CAAiBsJ,OAAjB,IAA0B,CAAvD,CAAX;AACAD,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAatB,UAAU,CAAC1E,CAAD,CAAV,GAAc,CAAd,GAAgB1D,KAAK,CAACM,UAAN,CAAiBqJ,OAAjB,IAA0B,CAAvD,CAAX;AACD;;AAEE,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,YAAQ5G,kBAAR;AACE,WAAK,GAAL;AACC,YAAI6G,UAAU,GAAG,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,EAAU,CAAC,CAAD,EAAGvC,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAH,EAA0C,CAACzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAA3C,CAAV,EAA6F,CAAC,CAAD,EAAGzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAH,EAA0CzC,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAA1C,CAA7F,CAAjB;;AACA,aAAI,IAAIvG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC8F,QAAQ,CAAC7F,MAA1B,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIyG,GAAG,GAAG,CAAC,CAACX,QAAQ,CAAC9F,CAAD,CAAT,CAAD,EAAe,CAAC+F,QAAQ,CAAC/F,CAAD,CAAT,CAAf,EAA6B,CAACgG,QAAQ,CAAChG,CAAD,CAAT,CAA7B,CAAV;AACA,cAAI0G,QAAQ,GAAG9G,oBAAoB,CAACyG,UAAD,EAAYI,GAAZ,CAApB,CAAqC,CAArC,CAAf;AACAP,UAAAA,QAAQ,CAAC3F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAP,UAAAA,QAAQ,CAAC5F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAN,UAAAA,QAAQ,CAAC7F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACD;;AACA;;AACF,WAAK,GAAL;AACC,YAAIC,UAAU,GAAG,CAAE,CAAC7C,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAD,EAAwC,CAAxC,EAA0CzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAA1C,CAAF,EAAoF,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAApF,EAA4F,CAAC,CAACzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAF,EAAyC,CAAzC,EAA2CzC,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAA3C,CAA5F,CAAjB;;AACA,aAAI,IAAIvG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC8F,QAAQ,CAAC7F,MAA1B,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIyG,GAAG,GAAG,CAAC,CAACX,QAAQ,CAAC9F,CAAD,CAAT,CAAD,EAAe,CAAC+F,QAAQ,CAAC/F,CAAD,CAAT,CAAf,EAA6B,CAACgG,QAAQ,CAAChG,CAAD,CAAT,CAA7B,CAAV;AACA,cAAI0G,QAAQ,GAAG9G,oBAAoB,CAAC+G,UAAD,EAAYF,GAAZ,CAApB,CAAqC,CAArC,CAAf;AACAP,UAAAA,QAAQ,CAAC3F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAP,UAAAA,QAAQ,CAAC5F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAN,UAAAA,QAAQ,CAAC7F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACD;;AACC;;AACH,WAAK,GAAL;AACC,YAAIE,UAAU,GAAG,CAAC,CAAC9C,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAD,EAAwC,CAACzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAzC,EAAgF,CAAhF,CAAD,EAAoF,CAACzC,IAAI,CAAC0C,GAAL,CAAS9G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAD,EAAwCzC,IAAI,CAACwC,GAAL,CAAS5G,gBAAgB,GAACoE,IAAI,CAACyC,EAAtB,GAAyB,GAAlC,CAAxC,EAA+E,CAA/E,CAApF,EAAsK,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAtK,CAAjB;;AACA,aAAI,IAAIvG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC8F,QAAQ,CAAC7F,MAA1B,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIyG,GAAG,GAAG,CAAC,CAACX,QAAQ,CAAC9F,CAAD,CAAT,CAAD,EAAe,CAAC+F,QAAQ,CAAC/F,CAAD,CAAT,CAAf,EAA6B,CAACgG,QAAQ,CAAChG,CAAD,CAAT,CAA7B,CAAV;AACA,cAAI0G,QAAQ,GAAG9G,oBAAoB,CAACgH,UAAD,EAAYH,GAAZ,CAApB,CAAqC,CAArC,CAAf;AACAP,UAAAA,QAAQ,CAAC3F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAP,UAAAA,QAAQ,CAAC5F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACAN,UAAAA,QAAQ,CAAC7F,IAAT,CAAcmG,QAAQ,CAAC,CAAD,CAAtB;AACD;;AACA;;AACF;AACCR,QAAAA,QAAQ,GAAGJ,QAAX;AACAK,QAAAA,QAAQ,GAAGJ,QAAX;AACAK,QAAAA,QAAQ,GAAGJ,QAAX;AACC;AAnCJ;;AAqCH,QAAIa,QAAQ,GAAGzI,SAAS,CAAC,CAAD,CAAT,IAAgB,CAA/B;AACA,QAAI0I,QAAQ,GAAG1I,SAAS,CAAC,CAAD,CAAT,IAAgB,CAA/B;AACA,QAAI2I,QAAQ,GAAG3I,SAAS,CAAC,CAAD,CAAT,IAAgB,CAA/B;AAEA,QAAI4I,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,KAAK,GAAG7K,KAAK,CAACQ,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,IAAsBR,KAAK,CAACW,WAAN,CAAkB,CAAlB,CAAlC;AACA,QAAImK,KAAK,GAAG9K,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,IAAsBV,KAAK,CAACW,WAAN,CAAkB,CAAlB,CAAlC;AACA,QAAIoK,KAAK,GAAG/K,KAAK,CAACY,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,IAAsBZ,KAAK,CAACW,WAAN,CAAkB,CAAlB,CAAlC;;AACA,SAAK,IAAIqK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACpB,QAAQ,CAACjG,MAA3B,EAAkCqH,CAAC,EAAnC,EAAsC;AACpCN,MAAAA,UAAU,CAACzG,IAAX,CAAgB2F,QAAQ,CAACoB,CAAD,CAAR,GAAcpB,QAAQ,CAACoB,CAAD,CAAR,GAAYH,KAAd,GAAsBN,QAAlD;AACAI,MAAAA,UAAU,CAAC1G,IAAX,CAAgB4F,QAAQ,CAACmB,CAAD,CAAR,GAAcnB,QAAQ,CAACmB,CAAD,CAAR,GAAYF,KAAd,GAAsBN,QAAlD;AACAI,MAAAA,UAAU,CAAC3G,IAAX,CAAgB6F,QAAQ,CAACkB,CAAD,CAAR,GAAclB,QAAQ,CAACkB,CAAD,CAAR,GAAYD,KAAd,GAAsBN,QAAlD;AACD;;AACDtB,IAAAA,QAAQ,CAACuB,UAAD,CAAR;AACArB,IAAAA,QAAQ,CAACsB,UAAD,CAAR;AACApB,IAAAA,QAAQ,CAACqB,UAAD,CAAR;AACD,GAtEQ,EAsEN,CAAC5K,KAAK,CAACI,UAAP,EAAkBJ,KAAK,CAACK,UAAxB,EAAmCL,KAAK,CAACM,UAAzC,EAAoD0H,UAApD,EAA+DpF,OAA/D,EAAuEM,kBAAvE,EAA0FE,gBAA1F,EAA2GtB,SAA3G,CAtEM,CAAT;;AAuED,QAAMmJ,YAAY,GAAInK,CAAD,IAAO;AAC1B,QAAI8G,KAAK,GAAGvG,QAAQ,CAACP,CAAC,CAACE,MAAF,CAASD,IAAV,CAApB;;AACA,QAAG,CAACiC,WAAW,CAACkC,QAAZ,CAAqB0C,KAArB,CAAJ,EAAgC;AAC/B3E,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAgB4E,KAAhB,CAAD,CAAd;AAEA;AACF,GAND;;AAOA,QAAMsD,SAAS,GAAIpK,CAAD,IAAO;AACxB,QAAI8G,KAAK,GAAGvG,QAAQ,CAACP,CAAC,CAACE,MAAF,CAASD,IAAV,CAApB;;AACA,QAAGiC,WAAW,CAACkC,QAAZ,CAAqB0C,KAArB,CAAH,EAA+B;AAC7B,UAAIuD,eAAe,GAAGnI,WAAW,CAACiG,OAAZ,CAAoBrB,KAApB,CAAtB;AACD3E,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAW,CAACzB,KAAZ,CAAkB,CAAlB,EAAoB4J,eAApB,CAAJ,EAAyC,GAAGnI,WAAW,CAACzB,KAAZ,CAAkB4J,eAAe,GAAC,CAAlC,CAA5C,CAAD,CAAd;AACA;AACF,GANA;;AAOD,QAAMC,wBAAwB,GAAItK,CAAD,IAAO;AACtCqC,IAAAA,qBAAqB,CAACrC,CAAC,CAACE,MAAF,CAASC,KAAV,CAArB;AACD,GAFD;;AAGA,QAAMoK,yBAAyB,GAAIvK,CAAD,IAAO;AACvC,QAAIwK,QAAQ,GAAGnK,UAAU,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAV,IAA8B,GAA7C;AACAoC,IAAAA,mBAAmB,CAACiI,QAAD,CAAnB;AACD,GAHD;;AAIA,QAAMC,iBAAiB,GAAIzK,CAAD,IAAO;AAC/B,QAAI8G,KAAK,GAAG,CAAZ;AACA,QAAI4D,QAAQ,GAAG1K,CAAC,CAACE,MAAF,CAASM,KAAT,CAAe3B,KAAf,CAAqB,EAArB,EAAyB,CAAzB,CAAf;;AACA,YAAO6L,QAAP;AACE,WAAK,GAAL;AACE5D,QAAAA,KAAK,GAAG,CAAR;AACA;;AACF,WAAK,GAAL;AACEA,QAAAA,KAAK,GAAG,CAAR;AACA;;AACF;AACEA,QAAAA,KAAK,GAAG,CAAR;AACA;AATJ;;AAWA7F,IAAAA,YAAY,CAAC,CACX,GAAGD,SAAS,CAACP,KAAV,CAAgB,CAAhB,EAAkBqG,KAAlB,CADQ,EAEXzG,UAAU,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAFC,EAGX,GAAGa,SAAS,CAACP,KAAV,CAAgBqG,KAAK,GAAC,CAAtB,CAHQ,CAAD,CAAZ;AAKD,GAnBD;;AAoBE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,SAAS,EAAI9F,SADf;AAEE,QAAA,MAAM,EAAGJ,MAFX;AAGE,QAAA,gBAAgB,EAAKZ,CAAD,IAAOqG,gBAAgB,CAACrG,CAAD,CAH7C;AAIE,QAAA,YAAY,EAAI,MAAMmB,cAAc,CAAC,KAAD,CAJtC;AAKE,QAAA,YAAY,EAAKnB,CAAD,IAAOkG,YAAY,CAAClG,CAAD,CALrC;AAME,QAAA,SAAS,EAAKA,CAAD,IAAO+G,SAAS,CAAC/G,CAAD,CAN/B;AAOE,QAAA,cAAc,EAAIc,cAPpB;AAQE,QAAA,WAAW,EAAIQ,WARjB;AASE,QAAA,WAAW,EAAIE,WATjB;AAUE,QAAA,WAAW,EAAIE,WAVjB;AAWE,QAAA,YAAY,EAAIE,YAXlB;AAYE,QAAA,KAAK,EAAI1C,KAZX;AAaE,QAAA,OAAO,EAAI4C,OAAO,CAACwD,IAAR,CAAa,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CAAxB,CAbb;AAcE,QAAA,KAAK,EAAI4C,KAdX;AAeE,QAAA,KAAK,EAAIE,KAfX;AAgBE,QAAA,KAAK,EAAIE,KAhBX;AAiBE,QAAA,YAAY,EAAIhB,YAjBlB;AAkBE,QAAA,aAAa,EAAIxF,aAlBnB;AAmBE,QAAA,WAAW,EAAIE,WAnBjB;AAoBE,QAAA,gBAAgB,EAAII,gBApBtB;AAqBE,QAAA,kBAAkB,EAAIF,kBArBxB;AAsBE,QAAA,oBAAoB,EAAI,CAACK,IAAD,EAAMC,IAAN,KAAeF,oBAAoB,CAACC,IAAD,EAAMC,IAAN;AAtB7D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eA4BE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,cAAc,EAAK1C,CAAD,IAAOoD,cAAc,CAACpD,CAAD;AADzC;AAAA;AAAA;AAAA;AAAA,cADF,eAIG,QAAC,SAAD;AACC,QAAA,SAAS,EAAEgB,SADZ;AAEC,QAAA,iBAAiB,EAAKhB,CAAD,IAAOyK,iBAAiB,CAACzK,CAAD,CAF9C;AAGC,QAAA,MAAM,EAAIY,MAHX;AAIC,QAAA,gBAAgB,EAAKZ,CAAD,IAAO4G,gBAAgB,CAAC5G,CAAD,CAJ5C;AAKC,QAAA,aAAa,EAAKA,CAAD,IAAOD,aAAa,CAACC,CAAD,CALtC;AAMC,QAAA,KAAK,EAAId,KANV;AAOC,QAAA,wBAAwB,EAAKc,CAAD,IAAOsK,wBAAwB,CAACtK,CAAD,CAP5D;AAQC,QAAA,yBAAyB,EAAKA,CAAD,IAAOuK,yBAAyB,CAACvK,CAAD,CAR9D;AASC,QAAA,gBAAgB,EAAIsC;AATrB;AAAA;AAAA;AAAA;AAAA,cAJH,eAeI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAI,MAAMvD,eAAe,CAAC,UAAD,CAAxC;AAAsD,UAAA,SAAS,EAAC,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAI,MAAMA,eAAe,CAAC,MAAD,CAAxC;AAAkD,UAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ,EAoBED,YAAY,KAAK,UAAjB,gBAA6B,QAAC,cAAD;AAC3B,QAAA,aAAa,EAAKkB,CAAD,IAAOD,aAAa,CAACC,CAAD,CADV;AAE3B,QAAA,kBAAkB,EAAKA,CAAD,IAAOI,kBAAkB,CAACJ,CAAD,CAFpB;AAG3B,QAAA,wBAAwB,EAAKA,CAAD,IAAOU,wBAAwB,CAACV,CAAD,CAHhC;AAI3B,QAAA,KAAK,EAAId,KAJkB;AAK3B,QAAA,OAAO,EAAI4C,OALgB;AAM3B,QAAA,KAAK,EAAIlD;AANkB;AAAA;AAAA;AAAA;AAAA,cAA7B,gBAQA,QAAC,UAAD;AACA,QAAA,KAAK,EAAIwJ,KADT;AAEA,QAAA,KAAK,EAAIE,KAFT;AAGA,QAAA,KAAK,EAAIE,KAHT;AAIA,QAAA,YAAY,EAAIhB,YAJhB;AAKA,QAAA,WAAW,EAAKmD,UAAD,IAAgB1I,gBAAgB,CAAC0I,UAAD,CAL/C;AAMA,QAAA,YAAY,EAAK3K,CAAD,IAAOmK,YAAY,CAACnK,CAAD,CANnC;AAOA,QAAA,SAAS,EAAKA,CAAD,IAAOoK,SAAS,CAACpK,CAAD,CAP7B;AAQA,QAAA,WAAW,EAAIkC,WARf;AASA,QAAA,aAAa,EAAIF,aATjB;AAUA,QAAA,KAAK,EAAI9C,KAVT;AAWA,QAAA,OAAO,EAAI4C,OAXX;AAYA,QAAA,KAAK,EAAIlD,KAZT;AAaA,QAAA,KAAK,EAAII,KAbT;AAcA,QAAA,QAAQ,EAAKgB,CAAD,IAAOf,QAAQ,CAACe,CAAD,CAd3B;AAeA,QAAA,gBAAgB,EAAIsC,gBAfpB;AAgBA,QAAA,kBAAkB,EAAIF;AAhBtB;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgFD;;GA5hBQ3D,G;;KAAAA,G;AA8hBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Structure from './components/Structure';\nimport Rotations from './components/Rotations';\nimport { useState, useEffect } from 'react';\nimport UploadFiles from './components/UploadFiles';\nimport SpeciesControl from './components/SpeciesControl';\nimport DataPoints from './components/DataPoints';\n\nfunction App() {\n  useEffect(() => {\n    console.log('Webystal. Created by Pantis Calin')\n  }, [])\n  \n  const atoms = \"H,He,Li,Be,B,C,N,O,F,Ne,Na,Mg,Al,Si,P,S,Cl,Ar,K,Ca,Sc,Ti,V,Cr,Mn,Fe,Co,Ni,Cu,Zn,Ga,Ge,As,Se,Br,Kr,Rb,Sr,Y,Zr,Nb,Mo,Tc,Ru,Rh,Pd,Ag,Cd,In,Sn,Sb,Te,I,Xe,Cs,Ba,La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu,Hf,Ta,W,Re,Os,Ir,Pt,Au,Hg,Tl,Pb,Bi,Po,At,Rn,Fr,Ra,Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr,Rf,Db,Sg,Bh,Hs,Mt,Ds,Rg,Cn,Uut,Fl,Uup,Lv,Uus,Uuo\".split(',')\n  const [toShowPannel, setToShowPannel] = useState('Elements')\n  const [order,setOrder] = useState('1;2;3;4')\n\n  // State constants\n  const [state,setState] = useState({\n    showAxis:true,\n    maxBound:2.4,\n    translateX:[0],\n    translateY:[0],\n    translateZ:[0],\n    repetitionX:[1],\n    constantX:[[3,0,0]],\n    repetitionY:[1],\n    constantY:[[0,3,0]],\n    repetitionZ:[1],\n    constantZ:[[0,0,3]],\n  })\n\n  // Chaging states that are single valued\n  const onChangeState = (e) => {\n    let name = e.target.name\n    let value = e.target.value\n    setState({\n      ...state,\n      [name]:value,\n    })\n  }\n\n  // Chaging states that are arrayed valued\n  const onChangeStateArray = (e) => {\n    let name = e.target.name\n    let value = parseFloat(e.target.value) || 0\n    let theIndex = parseInt(e.target.title.split(' ')[1])\n    setState({\n      ...state,\n      [name]: [\n        ...state[name].slice(0,theIndex),\n        value,\n        ...state[name].slice(theIndex+1)\n      ]\n    })\n  }\n\n   // Chaging states that are double order arrayed valued\n   const onChangeStateArrayDouble = (e) => {\n    let name = e.target.name\n    let value = parseFloat(e.target.value) || 0\n    let theIndex = parseInt(e.target.title.split(' ')[1])\n    let theIndexAtom = parseInt(e.target.title.split(' ')[3])-1\n    setState({\n      ...state,\n      [name]: [\n        ...state[name].slice(0,theIndex),\n        [\n          ...state[name][theIndex].slice(0,theIndexAtom),\n            value,\n          ...state[name][theIndex].slice(theIndexAtom+1)\n        ],\n        ...state[name].slice(theIndex+1)\n      ]\n    })\n  }\n\n  // List of Constants\n  const [angles, setAngles] = useState([0,0])\n  const [visualDistance, setVisualDistance] = useState(10)\n  const [stretches, setStretches] = useState([0,0,0])\n  const [clickStatus, setClickStatus] = useState(false)\n  const [positionMouse, setPositionMouse] = useState([0,0])\n  const [dataToPlotX, setDataToPlotX] = useState([1,2,3])\n  const [dataToPlotY, setDataToPlotY] = useState([1,2,3])\n  const [dataToPlotZ, setDataToPlotZ] = useState([1,2,3])\n  const [speciesAtoms, setSpeciesAtoms] = useState([1,1,1])\n  const [species, setSpecies] = useState([1])\n  const [selectedPoint, setSelectedPoint] = useState(100)\n  const [removedData, setRemovedData] = useState([])\n  const [typeOfDataRotation, setTypeOfDataRotation] = useState('none')\n  const [angleRotatedData, setAngleRotatedData] = useState(180)\n\n  // Matrix multiplication\n  const matrixMultiplication = (mat1,mat2) => {\n    let resultantMatrix = []\n    for(let i =0; i<mat2[0].length;i++){\n      let oneRow = []\n        for(let j =0; j<mat1.length;j++){\n        let oneTerm = 0\n        for(let k =0; k<mat1.length;k++){\n          oneTerm += parseFloat((mat1[j][k]*mat2[k][i]).toFixed(10))\n        }\n        oneRow.push(oneTerm)\n      }\n      resultantMatrix.push(oneRow)\n    }\n    return(resultantMatrix)\n  }\n  // Uploading files\n  const onUploadedFile = (e) => {\n    let setX = []\n    let setY = []\n    let setZ = []\n    let setSpec = []\n    let allLatConst = []\n    let speciesInCome = []\n\n    let length = e.target.files.length\n    for(let fil = 0; fil<length; fil++){\n      var theFile = e.target.files[fil]\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        const text = e.target.result;\n        const bigXSF = text.includes('INFO')\n        let splittedText = text.split(/PRIMVEC\\n|PRIMCOORD\\n|CONVVEC\\n|ATOMS\\n|FRAMES\\n/) \n        let primVec = (splittedText[1].split('\\n')).slice(0,3)\n        let primCoord \n        if(bigXSF) {\n          primCoord = splittedText[6].split('\\n')\n        } else {\n          primCoord = splittedText[2].split('\\n')\n        }\n        let primitiveVectors = []\n        primVec.forEach(element => {\n          let row = element.split(' ').filter((fileElem) =>( fileElem.length>0))\n          primitiveVectors = [...primitiveVectors,row.map((element) => (parseFloat(element)))]\n        });\n\n        allLatConst = [...allLatConst,primitiveVectors]\n        let indexToStart = bigXSF? 0:1\n        let datX = []\n        let datY = []\n        let datZ = []\n        let species = []\n        for(let i = indexToStart; i<primCoord.length;i++){\n          let row = primCoord[i].split(' ').filter((fileElem) =>( fileElem.length>0))\n          if(row.length>0){\n            species = [...species,parseInt(row[0])]\n            datX = [...datX,parseFloat(row[1])]\n            datY = [...datY,parseFloat(row[2])]\n            datZ = [...datZ,parseFloat(row[3])]\n          } \n        }\n\n        setX = [...setX,...datX]\n        setY = [...setY,...datY]\n        setZ = [...setZ,...datZ]\n        setSpec = [...setSpec,...species]\n\n        let allSeciesInOneFor = []\n        for(let i = 0; i< species.length; i++){\n          let thSpec = species[i]\n          if(!allSeciesInOneFor.includes(thSpec)){\n            allSeciesInOneFor = [...allSeciesInOneFor,thSpec]\n          }\n        }\n        speciesInCome = [...speciesInCome,allSeciesInOneFor]\n\n   \n        if(fil === length-1){\n          setDataToPlotX(setX)\n          setDataToPlotY(setY)\n          setDataToPlotZ(setZ)\n          setSpeciesAtoms(setSpec)\n          let arrInBetween = []\n          for(let i = 0; i<speciesInCome.length; i++){\n            for(let j = 0; j<speciesInCome[i].length; j++){\n              arrInBetween = [...arrInBetween,[speciesInCome[i][j],i]]\n            }\n          }\n          speciesInCome = [...arrInBetween.sort((a,b) => a[0]-b[0])]\n          let allSecies = []\n          for(let i = 0; i< setSpec.length; i++){\n            let thSpec = setSpec[i]\n            if(!allSecies.includes(thSpec)){\n              allSecies = [...allSecies,thSpec]\n            }\n          }\n          let xConstXPush = []\n          let yConstXPush = []\n          let zConstXPush = []\n          for(let j = 0; j<speciesInCome.length; j++){\n            let speciesSet = speciesInCome[j][0]\n            let theIndex  = speciesInCome[j][1]\n            for(let i = 0; i<allSecies.length;i++){\n              let lookSpecies  = allSecies[i]\n              if(speciesSet === lookSpecies){\n\n                xConstXPush = [...xConstXPush,allLatConst[theIndex][0]]\n                yConstXPush = [...yConstXPush,allLatConst[theIndex][1]]\n                zConstXPush = [...zConstXPush,allLatConst[theIndex][2]]\n                break\n              }\n            }\n          }\n       \n          setState({\n            ...state,\n            'translateX':Array(allSecies.length).fill(0),\n            'translateY':Array(allSecies.length).fill(0),\n            'translateZ':Array(allSecies.length).fill(0),\n            \"repetitionX\":Array(allSecies.length).fill(1),\n            \"repetitionY\":Array(allSecies.length).fill(1),\n            \"repetitionZ\":Array(allSecies.length).fill(1),\n            \"constantX\":xConstXPush,\n            \"constantY\":yConstXPush,\n            \"constantZ\":zConstXPush,\n          })\n          setSpecies(allSecies.sort((a,b) => a-b))\n        }\n      }\n      reader.readAsText(theFile);\n    }\n  }\n  const clickPressed = (e) => {\n    setClickStatus(true)\n    setPositionMouse([e.clientX,e.clientY])\n  }\n  const changeOnListener = (e) => {\n    if(clickStatus){\n      let xInReturn = positionMouse[0]\n      let yInReturn = positionMouse[1]\n      let angleX = angles[0]\n      let angleY = angles[1]\n      if(e.clientX>xInReturn){\n        angleX += Math.abs(e.clientX-xInReturn)\n      } else {\n        angleX -= Math.abs(e.clientX-xInReturn)\n      }\n      if(e.clientY>yInReturn){\n        angleY += Math.abs(e.clientY-yInReturn)\n      } else {\n        angleY -= Math.abs(e.clientY-yInReturn)\n      }\n\n      xInReturn = e.clientX\n      yInReturn = e.clientY\n      setPositionMouse([xInReturn,yInReturn])\n      setAngles([angleX,angleY])\n    }\n  }\n  const onRotationChange = (e) => {\n    let axisRotated = e.target.name\n    let result = e.target.value || 0\n    let index = 0\n    switch(axisRotated){\n      case 'y':\n        index = 1;\n        break;\n      default:\n        index = 0;\n    }\n    setAngles([\n      ...angles.slice(0,index),\n      parseFloat(result),\n      ...angles.slice(index+1)\n    ])\n  }\n  const zoomInOut = (e) => {\n    let sign = e.deltaY/530\n    setVisualDistance(visualDistance*(sign+1))\n  }\n  \n  const [dataMultiX, setDataMultiX] = useState([])\n  const [dataMultiY, setDataMultiY] = useState([])\n  const [dataMultiZ, setDataMultiZ] = useState([])\n  const [allMultiSpec, setAllMultiSpec] = useState(speciesAtoms)\n  \n  useEffect(() => {\n    let arrayX = [...dataToPlotX]\n    let arrayY = [...dataToPlotY]\n    let arrayZ = [...dataToPlotZ]\n    let speciesMulti = [...speciesAtoms]\n\n    let xForPush = []\n    let yForPush = []\n    let zForPush = []\n    let specForPush = []\n    for(let i =0; i< arrayX.length;i++){\n      let atomIndex = species.indexOf(speciesAtoms[i])\n      if(state.repetitionX[atomIndex] !== 0){\n        for(let j =0; j<state.repetitionX[atomIndex]; j++){\n          xForPush = [...xForPush, arrayX[i]/1+state.constantX[atomIndex][0]*(j)]\n          yForPush = [...yForPush, arrayY[i]/1+state.constantX[atomIndex][1]*(j)]\n          zForPush = [...zForPush, arrayZ[i]/1+state.constantX[atomIndex][2]*(j)]\n          specForPush = [...specForPush,speciesMulti[i]]\n        }\n       \n      }\n    }\n    arrayX = [...xForPush]\n    arrayY = [...yForPush]\n    arrayZ = [...zForPush]\n    speciesMulti = [...specForPush]\n     xForPush = []\n     yForPush = []\n     zForPush = []\n     specForPush = []\n    for(let i =0; i< arrayY.length;i++){\n      let atomIndex = species.indexOf(speciesMulti[i])\n      if(state.repetitionY[atomIndex] !== 0){\n        for(let j =0; j<state.repetitionY[atomIndex]; j++){\n          xForPush = [...xForPush, arrayX[i]/1+state.constantY[atomIndex][0]*(j)]\n          yForPush = [...yForPush, arrayY[i]/1+state.constantY[atomIndex][1]*(j)]\n          zForPush = [...zForPush, arrayZ[i]/1+state.constantY[atomIndex][2]*(j)]\n          specForPush = [...specForPush,speciesMulti[i]]\n        }\n       \n      }\n    }\n    arrayX = [...xForPush]\n    arrayY = [...yForPush]\n    arrayZ = [...zForPush]\n    speciesMulti = [...specForPush]\n    xForPush = []\n    yForPush = []\n    zForPush = []\n    specForPush = []\n   for(let i =0; i< arrayZ.length;i++){\n     let atomIndex = species.indexOf(speciesMulti[i])\n     if(state.repetitionZ[atomIndex] !== 0){\n       for(let j =0; j<state.repetitionZ[atomIndex]; j++){\n         xForPush = [...xForPush, arrayX[i]/1+state.constantZ[atomIndex][0]*(j)]\n         yForPush = [...yForPush, arrayY[i]/1+state.constantZ[atomIndex][1]*(j)]\n         zForPush = [...zForPush, arrayZ[i]/1+state.constantZ[atomIndex][2]*(j)]\n         specForPush = [...specForPush,speciesMulti[i]]\n       }\n      \n     }\n   }\n   arrayX = [...xForPush]\n   arrayY = [...yForPush]\n   arrayZ = [...zForPush]\n   speciesMulti = [...specForPush]\n\n    setDataMultiX(arrayX)\n    setDataMultiY(arrayY)\n    setDataMultiZ(arrayZ)\n    setAllMultiSpec(speciesMulti)\n\n  }, [state.constantX, state.repetitionX,state.constantZ, state.repetitionZ,state.constantY, state.repetitionY,species])\n\n  const [dataX, setDataX] = useState([])\n  const [dataY, setDataY] = useState([])\n  const [dataZ, setDataZ] = useState([])\n  useEffect(() => {\n    let datXHere = []\n    let datYHere = []\n    let datZHere = []\n    for(let i = 0; i< dataMultiX.length; i++){\n      let trIndex = species.indexOf(allMultiSpec[i])\n\n      datXHere = [...datXHere,dataMultiX[i]/1+state.translateX[trIndex]/1]\n      datYHere = [...datYHere,dataMultiY[i]/1+state.translateY[trIndex]/1]\n      datZHere = [...datZHere,dataMultiZ[i]/1+state.translateZ[trIndex]/1]\n    }  \n  \n       let xRotated = []\n       let yRotated = []\n       let zRotated = []\n       switch (typeOfDataRotation) {\n         case 'x':\n          let xMatrixRot = [[1,0,0], [0,Math.cos(angleRotatedData*Math.PI/180),-Math.sin(angleRotatedData*Math.PI/180)],[0,Math.sin(angleRotatedData*Math.PI/180),Math.cos(angleRotatedData*Math.PI/180)]]\n          for(let i = 0; i<datXHere.length;i++ ){\n            let vec = [[datXHere[i]],[datYHere[i]],[datZHere[i]]]\n            let newCoord = matrixMultiplication(xMatrixRot,vec)[0]\n            xRotated.push(newCoord[0])\n            yRotated.push(newCoord[1])\n            zRotated.push(newCoord[2])\n          }\n           break;\n         case 'y':\n          let yMatrixRot = [ [Math.cos(angleRotatedData*Math.PI/180),0,Math.sin(angleRotatedData*Math.PI/180)],[0,1,0],[-Math.sin(angleRotatedData*Math.PI/180),0,Math.cos(angleRotatedData*Math.PI/180)]]\n          for(let i = 0; i<datXHere.length;i++ ){\n            let vec = [[datXHere[i]],[datYHere[i]],[datZHere[i]]]\n            let newCoord = matrixMultiplication(yMatrixRot,vec)[0]\n            xRotated.push(newCoord[0])\n            yRotated.push(newCoord[1])\n            zRotated.push(newCoord[2])\n          }\n            break;\n         case 'z':\n          let zMatrixRot = [[Math.cos(angleRotatedData*Math.PI/180),-Math.sin(angleRotatedData*Math.PI/180),0],[Math.sin(angleRotatedData*Math.PI/180),Math.cos(angleRotatedData*Math.PI/180),0],[0,0,1]]\n          for(let i = 0; i<datXHere.length;i++ ){\n            let vec = [[datXHere[i]],[datYHere[i]],[datZHere[i]]]\n            let newCoord = matrixMultiplication(zMatrixRot,vec)[0]\n            xRotated.push(newCoord[0])\n            yRotated.push(newCoord[1])\n            zRotated.push(newCoord[2])\n          }\n           break;\n         default:\n          xRotated = datXHere\n          yRotated = datYHere\n          zRotated = datZHere\n           break;\n       }\n    let xStretch = stretches[0] || 0\n    let yStretch = stretches[1] || 0\n    let zStretch = stretches[2] || 0\n\n    let xStretched = []\n    let yStretched = []\n    let zStretched = []\n    let cellX = state.constantX[0][0]*state.repetitionZ[0]\n    let cellY = state.constantY[0][1]*state.repetitionZ[0]\n    let cellZ = state.constantZ[0][2]*state.repetitionZ[0]\n    for (let l = 0; l<xRotated.length;l++){\n      xStretched.push(xRotated[l]+((xRotated[l]/cellX))*xStretch)\n      yStretched.push(yRotated[l]+((yRotated[l]/cellY))*yStretch)\n      zStretched.push(zRotated[l]+((zRotated[l]/cellZ))*zStretch)\n    }\n    setDataX(xStretched)\n    setDataY(yStretched)\n    setDataZ(zStretched)\n  }, [state.translateX,state.translateY,state.translateZ,dataMultiX,species,typeOfDataRotation,angleRotatedData,stretches])\n const onRemoveData = (e) => {\n   let index = parseInt(e.target.name)\n   if(!removedData.includes(index)){\n    setRemovedData([...removedData,index])\n\n   }\n }\n const onAddData = (e) => {\n  let index = parseInt(e.target.name)\n  if(removedData.includes(index)){\n    let positionRemoved = removedData.indexOf(index)\n   setRemovedData([...removedData.slice(0,positionRemoved),...removedData.slice(positionRemoved+1)])\n  }\n}\nconst onChangeDataRotationType = (e) => {\n  setTypeOfDataRotation(e.target.value)\n}\nconst onChangeDataRotationAngle = (e) => {\n  let angleRot = parseFloat(e.target.value) || 180\n  setAngleRotatedData(angleRot)\n}\nconst onChangeStretches = (e) => {\n  let index = 0\n  let axisType = e.target.title.split('')[0]\n  switch(axisType){\n    case \"y\":\n      index = 1;\n      break\n    case \"z\":\n      index = 2;\n      break;\n    default:\n      index = 0;\n      break;\n  }\n  setStretches([\n    ...stretches.slice(0,index),\n    parseFloat(e.target.value),\n    ...stretches.slice(index+1)\n  ])\n}\n  return (\n    <div className=\"App\">\n      <div className='canvas'>\n        <Structure\n          stretches = {stretches}\n          angles ={angles}\n          changeOnListener = {(e) => changeOnListener(e)}\n          releaseClick = {() => setClickStatus(false)}\n          performClick = {(e) => clickPressed(e)}\n          zoomInOut = {(e) => zoomInOut(e)}\n          visualDistance = {visualDistance}\n          dataToPlotX = {dataToPlotX}\n          dataToPlotY = {dataToPlotY}\n          dataToPlotZ = {dataToPlotZ}\n          speciesAtoms = {speciesAtoms}\n          state = {state}\n          species = {species.sort((a,b) => a-b)}\n          dataX = {dataX}\n          dataY = {dataY}\n          dataZ = {dataZ}\n          allMultiSpec = {allMultiSpec}\n          selectedPoint = {selectedPoint}\n          removedData = {removedData}\n          angleRotatedData = {angleRotatedData}\n          typeOfDataRotation = {typeOfDataRotation}\n          matrixMultiplication = {(mat1,mat2) => matrixMultiplication(mat1,mat2)}\n        />\n      </div>\n    \n      <div className='ControlPannel'>\n        <UploadFiles\n          onUploadedFile = {(e) => onUploadedFile(e)}\n        />\n         <Rotations \n          stretches={stretches}\n          onChangeStretches = {(e) => onChangeStretches(e)}\n          angles = {angles}\n          onRotationChange = {(e) => onRotationChange(e)}\n          onChangeState = {(e) => onChangeState(e)}\n          state = {state}\n          onChangeDataRotationType = {(e) => onChangeDataRotationType(e)}\n          onChangeDataRotationAngle = {(e) => onChangeDataRotationAngle(e)}\n          angleRotatedData = {angleRotatedData}\n        />\n          <div className='dataAndElements'>\n            <button onClick = {() => setToShowPannel(\"Elements\")} className='download'>Elements</button>\n            <button onClick = {() => setToShowPannel(\"Data\")} className='download'>Data </button>\n          </div>\n\n       {toShowPannel === \"Elements\"? <SpeciesControl\n          onChangeState = {(e) => onChangeState(e)}\n          onChangeStateArray = {(e) => onChangeStateArray(e)}\n          onChangeStateArrayDouble = {(e) => onChangeStateArrayDouble(e)}\n          state = {state}\n          species = {species}\n          atoms = {atoms}\n        />:\n        <DataPoints\n        dataX = {dataX}\n        dataY = {dataY}\n        dataZ = {dataZ}\n        allMultiSpec = {allMultiSpec}\n        dataClicked = {(numberData) => setSelectedPoint(numberData)}\n        onRemoveData = {(e) => onRemoveData(e)}\n        onAddData = {(e) => onAddData(e)}\n        removedData = {removedData}\n        selectedPoint = {selectedPoint}\n        state = {state}\n        species = {species}\n        atoms = {atoms}\n        order = {order}\n        setOrder = {(e) => setOrder(e)}\n        angleRotatedData = {angleRotatedData}\n        typeOfDataRotation = {typeOfDataRotation}\n        />}\n        \n      </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}